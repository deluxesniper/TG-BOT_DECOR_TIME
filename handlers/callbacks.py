from gc import callbacks

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F, Router
from aiogram.types import CallbackQuery, Message, FSInputFile, ReplyKeyboardRemove
from Keyboard.inline import info_company, info_stor,fact_again,paint_to_calculate,get_persons_keyboard
from Keyboard.reply import under_the_menu, my_advertisement, save_or_clear
from services.dialogs import dialogis, PERSONS
from services.gpt_random_fact import get_fact
from stor.contacts import XL_city, XL_email, XL_phone,XL_opening_hours,XL_address
from services.variable import save_message
class AdvertisementStates(StatesGroup):
    waiting_for_text = State()
from handlers.states import Calcs_adhesive, Calcs_granella, Calcs_kraft_pro_matt, Calcs_Durata, Create_Users_messages

router = Router()

@router.callback_query(F.data=="Raschet")
async def paint_to_calculate_handler(call: CallbackQuery):
    await call.answer()
    await call.message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –æ–±—Ö–æ–¥–∏–º–æ–π –æ–±—ä—ë–º–∞ –∫—Ä–∞—Å–∫–∏, –ª–∞–∫–∞ –∏–ª–∏ –≥—Ä—É–Ω—Ç–æ–≤–∫–∏, —Ç–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é",reply_markup=paint_to_calculate())


@router.callback_query(F.data=="adhesive")
async def calculate_Priming_Adhesive_handler(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º¬≤")
    await state.set_state(Calcs_adhesive.waiting)
    await call.answer()

@ router.message(Calcs_adhesive.waiting)
async def formula_adhesive(message: Message, state: FSMContext):
            adhesive = float(message.text)
            adhesive_consumption = 7.5
            result = adhesive / adhesive_consumption

            await message.answer(
                f"–° –≤–∞—à–µ–π –ø–ª–æ—â–∞–¥—å—é {adhesive} –º¬≤\n"
                f"–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è: {result:.2f} –ª–∏—Ç—Ä–æ–≤ –≥—Ä—É–Ω—Ç–æ–≤–∫–∏ Adhesive\n"
                f"–†–∞—Å—Ö–æ–¥: {adhesive_consumption} –º¬≤/–ª–∏—Ç—Ä"
            )
            await state.clear()


@router.callback_query(F.data=="granella")
async def calculate_plaster_handler(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º¬≤")
    await state.set_state(Calcs_granella.waiting)
    await call.answer()

@router.message(Calcs_granella.waiting)
async def formula_granella(message: Message, state: FSMContext):
            granella = float(message.text)
            granella_consumption = 4
            result = granella / granella_consumption

            await message.answer(
                f"–° –≤–∞—à–µ–π –ø–ª–æ—â–∞–¥—å—é {granella} –º¬≤\n"
                f"–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è: {result:.2f} –ª–∏—Ç—Ä–æ–≤ —à—Ç—É–∫–∞—Ç—É—Ä–∫–∏ Granella\n"
                f"–†–∞—Å—Ö–æ–¥: {granella_consumption} –º¬≤/–ª–∏—Ç—Ä"
            )
            await state.clear()



@router.callback_query(F.data=="kraft_pro_matt")
async def calculate_varnish_handler(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º¬≤")
    await state.set_state(Calcs_kraft_pro_matt.waiting)
    await call.answer()

@router.message(Calcs_kraft_pro_matt.waiting)
async def formula_kraft_pro_matt(message: Message, state: FSMContext):
            kraft_pro_matt = float(message.text)
            kraft_pro_matt_consumption = 10
            result = kraft_pro_matt / kraft_pro_matt_consumption

            await message.answer(
                f"–° –≤–∞—à–µ–π –ø–ª–æ—â–∞–¥—å—é {kraft_pro_matt} –º¬≤\n"
                f"–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è: {result:.2f} –ª–∏—Ç—Ä–æ–≤  –ª–∞–∫–∞ Kraft pro matt\n"
                f"–†–∞—Å—Ö–æ–¥: {kraft_pro_matt_consumption} –º¬≤/–ª–∏—Ç—Ä"
            )
            await state.clear()



@router.callback_query(F.data=="durata")
async def calculate_varnish_handler(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º¬≤")
    await state.set_state(Calcs_Durata.waiting)
    await call.answer()

@router.message(Calcs_Durata.waiting)
async def formula_durata(message: Message, state: FSMContext):
            durata = float(message.text)
            durata_consumption = 10
            result = durata / durata_consumption

            await message.answer(
                f"–° –≤–∞—à–µ–π –ø–ª–æ—â–∞–¥—å—é {durata} –º¬≤\n"
                f"–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è: {result:.2f} –ª–∏—Ç—Ä–æ–≤  –ª–∞–∫–∞ Durata\n"
                f"–†–∞—Å—Ö–æ–¥: {durata_consumption} –º¬≤/–ª–∏—Ç—Ä"
            )
            await state.clear()



@router.callback_query(F.data=="info")
async def info(call:CallbackQuery):
    await call.answer()
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–Ω–∞—Ç—å",reply_markup=info_company())



@router.callback_query(F.data =="Locations")
async def location(call:CallbackQuery):
    await  call.answer()
    await call.message.answer(f"–ù–∞—à –∞–¥—Ä–µ—Å: {XL_city} {XL_address}\n –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {XL_opening_hours}\n —Ç–µ–ª–µ—Ñ–æ–Ω: {XL_phone}\n EMAIL@: {XL_email}")



@router.callback_query(F.data =="stors")
async def stors(call:CallbackQuery):
    await call.answer()
    await call.message.answer("–ê–¥—Ä–µ—Å–∞ –Ω–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤",reply_markup=info_stor())



@router.callback_query(F.data =="random_fact")
async def random_handler(call:CallbackQuery):
    await call.answer('–©–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É –∫–∞–∫ –ø–æ—è–≤–∏–ª–∏—Å—å –∫—Ä–∞—Å–∫–∏, –∫–∞–∂–¥–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –¥—Ä—É–≥–æ–π',show_alert=True)
    fact = await get_fact()
    await call.message.answer(f'–§–∞–∫—Ç: {fact}',reply_markup=fact_again())



@router.message(F.text == "–û–±—ä—è–≤–ª–µ–Ω–∏—è")
async def menu_handler(message: Message):
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å: —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",reply_markup=under_the_menu())



@router.message(F.text =="–°–æ–∑–¥–∞—Ç—å –û–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def zagolovok(message: Message,state: FSMContext):
    await state.set_state(Create_Users_messages.user_for_text)
    await message.answer( "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n\n"
        "üìå –®–∞–≥ 1 –∏–∑ 6: –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")




@router.message(Create_Users_messages.user_for_text,F.text)
async def create_user_handler(message: Message,state: FSMContext):
    await state.update_data(user_for_text=message.text)
    await state.set_state(Create_Users_messages.name)
    await message.answer("üìù –®–∞–≥ 2 –∏–∑ 6: –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:" )


@router.message(Create_Users_messages.name,F.text)
async def create_name_handler(message: Message,state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Create_Users_messages.age)
    await  message.answer("üìù–®–∞–≥ 3 –∏–∑ 6: –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç ")



@router.message(Create_Users_messages.age,F.text)
async def create_age_handler(message: Message,state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Create_Users_messages.city)
    await  message.answer("üìù–®–∞–≥ 4 –∏–∑ 6: –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ ")


@router.message(Create_Users_messages.city,F.text)
async def create_city_handler(message: Message,state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(Create_Users_messages.announcement)
    await message.answer("üìù–®–∞–≥ 5 –∏–∑ 6: –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è")



# –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É
@router.message(Create_Users_messages.announcement, F.text)
async def create_announcement_handler(message: Message, state: FSMContext):
    await state.update_data(announcement=message.text)  # ‚úÖ
    await state.set_state(Create_Users_messages.payment)
    await message.answer("üìù –®–∞–≥ 6 –∏–∑ 6: –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É")


@router.message(Create_Users_messages.payment, F.text)
async def create_payment_handler(message: Message, state: FSMContext):
    await state.update_data(payment=message.text)
    data = await state.get_data()

    preview_text = (
        "üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
        f"üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: {data.get('user_for_text')}\n"
        f"üë§ –ò–º—è: {data.get('name')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age')}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {data.get('city')}\n"
        f"üìù –¢–µ–∫—Å—Ç: {data.get('announcement')}\n"
        f"üí∞ –¶–µ–Ω–∞: {data.get('payment',)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await state.set_state(Create_Users_messages.confirmation)
    await message.answer(preview_text, reply_markup=save_or_clear())


@router.message(Create_Users_messages.confirmation, F.text.in_(["–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å"]))
async def handle_confirmation(message: Message, state: FSMContext):
    if message.text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
        data = await state.get_data()
        message_data = {
            "user_for_text": data.get('user_for_text', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "name": data.get('name'),
            "age": data.get('age'),
            "city": data.get('city'),
            "announcement": data.get('announcement'),
            "payment": data.get('payment')

        }
        save_message(message_data)
        await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=under_the_menu())
    else:
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=under_the_menu())

    await state.clear()


@router.message(Create_Users_messages.confirmation)
async def handle_invalid_confirmation(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:", reply_markup=save_or_clear())


@router.callback_query(F.data=="Dialog")
async def talk_dialog(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–î–∏–∞–ª–æ–≥ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é",reply_markup=get_persons_keyboard())



@router.callback_query(F.data.startswith('select_persons:'))
async def select_persons_handler(call: CallbackQuery):
    select_persons=call.data.split(":")[1]
    dialogis[call.message.from_user.id] = [{'role':'system','content':PERSONS[select_persons]}]

    await call.message.answer(f'–¢—ã –≤—ã–±—Ä–∞–ª {select_persons} –º–æ–∂–µ—à—å –ø–æ–æ–±—â–∞—Ç—Å—è —Å –Ω–∏–º')
    await call.answer()


